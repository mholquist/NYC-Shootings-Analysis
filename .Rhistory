nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's
nyc_shootings %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
head(nyc_shootings)
#Missing values for perp sex, probably means they did not catch the person.
#will need to address this in data cleaning stage.
#replce "" with NA
# count/find proportion of NA per column
# Check how many obs have complete obs
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#replce "" with NA
# count/find proportion of NA per column
# Check how many obs have complete obs
#Looking at missing values in the dataset
colMeans(is.na(nyc_shootings)) * 100
#Looking at missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#load the dataset
nyc_shootings <- read.csv("NYPD_Shooting_Incident_Data__Historic_.csv")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#replce "" with NA
# count/find proportion of NA per column
# Check how many obs have complete obs
#Looking at percent missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's
nyc_shootings %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's again
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#checking row-wise missing
nyc_shootings %>%
rowwise %>%
summarise(NA_per_row = sum(is.na(.)))
#checking row-wise missing
rowMeans(is.na(nyc_shootings)) * 100
#checking amount of cases that have complete information
sum(complete.cases(nyc_shootings))
#checking amount of cases that have complete information
sum(complete.cases(nyc_shootings))/nrow(nyc_shootings)
#checking proportion of complete cases
complete_cases <- sum(complete.cases(nyc_shootings))/nrow(nyc_shootings)
print("proportion of complete cases:", complete_cases )
#checking proportion of complete cases
complete_cases <- sum(complete.cases(nyc_shootings))/nrow(nyc_shootings)
print("proportion of complete cases:", complete_cases)
#checking proportion of complete cases
complete_cases <- sum(complete.cases(nyc_shootings))/nrow(nyc_shootings)
print(complete_cases)
print("proportion of complete cases:" complete_cases)
#checking proportion of complete cases
complete_cases <- sum(complete.cases(nyc_shootings))/nrow(nyc_shootings)
print("proportion of complete cases:", complete_cases)
#checking proportion of complete cases
sum(complete.cases(nyc_shootings))/nrow(nyc_shootings)
#checking percentage of complete cases
sum(complete.cases(nyc_shootings))/nrow(nyc_shootings) *100
#checking datatypes
str(nyc_shootings)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#checking datatypes
str(nyc_shootings)
#need to change the dates and times to proper format
nyc_shootings$OCCUR_DATE <- mdy(nyc_shootings$OCCUR_DATE)
nyc_shootings$OCCUR_TIME <- hms(nyc_shootings$OCCUR_TIME)
#checking it after
str(nyc_shootings)
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_hist(aes(x = OCCUR_DATE))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_density(aes(x = OCCUR_DATE))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE, color = "black", fill = "blue"))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE), color = "black", fill = "steelblue"))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE), col = "black", fill = "steelblue"))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE), col = "black", fill = "steelblue")
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_line(aes(x = OCCUR_DATE), col = "black", fill = "steelblue") +
title(xlab = "Date of Shooting Incident", ylab = "Number of Shootings")
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_line(aes(x = OCCUR_DATE)) +
title(xlab = "Date of Shooting Incident", ylab = "Number of Shootings")
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_line(aes(x = OCCUR_DATE)) +
#title(xlab = "Date of Shooting Incident", ylab = "Number of Shootings")
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_line(aes(x = OCCUR_DATE))
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE), col = "black", fill = "steelblue") +
title(xlab = "Date of Shooting Incident", ylab = "Number of Shootings")
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE), col = "black", fill = "steelblue") +
title("Distribution of Shootings over time in NYC") +
xlab("Date of Shooting Incident") + ylab("Number of Shootings")
#lets look at the distribution of shootings by date
ggplot(nyc_shootings) +
geom_histogram(aes(x = OCCUR_DATE), col = "black", fill = "steelblue") +
labs(title = "Distribution of Shootings over time in NYC",
xlab = "Date of Shooting Incident",  ylab = "Number of Shootings")
shootings_long <- tidyr::gather(shootings, key = "race", value = "count", -sex)
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n = n())
unique(nyc_shootings$PERP_SEX)
#nyc_shootings %>%
#  group_by(VIC_RACE, VIC_SEX)%>%
#  summarise(n = n())
#load the dataset
nyc_shootings <- read.csv("NYPD_Shooting_Incident_Data__Historic_.csv")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#Looking at percent missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's again
round(colMeans(is.na(nyc_shootings)) * 100, 2)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_AGE_GROUP)
unique(nyc_shootings$PERP_AGE_GROUP)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_RACE)
unique(nyc_shootings$PERP_AGE_GROUP)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_RACE)
print("------------------------")
unique(nyc_shootings$PERP_AGE_GROUP)
#Now that I've verified, can fill with NA
nyc_shootings <- replace(nyc_shootings$PERP_SEX, is.na(nyc_shootings$PERP_SEX), "U")
#Filling the NA's with unknown
nyc_shootings <- replace(nyc_shootings$PERP_SEX, is.na(nyc_shootings$PERP_SEX), "U")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#load the dataset
nyc_shootings <- read.csv("NYPD_Shooting_Incident_Data__Historic_.csv")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#Looking at percent missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's again
round(colMeans(is.na(nyc_shootings)) * 100, 2)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_RACE)
unique(nyc_shootings$PERP_AGE_GROUP)
#Filling the NA's with unknown
nyc_shootings <- replace(nyc_shootings$PERP_SEX, is.na(nyc_shootings$PERP_SEX), "U")
nyc_shootings <- replace(nyc_shootings$PERP_RACE, is.na(nyc_shootings$PERP_RACE), "UNKNOWN")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#load the dataset
nyc_shootings <- read.csv("NYPD_Shooting_Incident_Data__Historic_.csv")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#Looking at percent missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's again
round(colMeans(is.na(nyc_shootings)) * 100, 2)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_RACE)
unique(nyc_shootings$PERP_AGE_GROUP)
#Filling the NA's with unknown
nyc_shootings <- replace(nyc_shootings$PERP_SEX, is.na(nyc_shootings$PERP_SEX), "U")
nyc_shootings <- replace(nyc_shootings$PERP_RACE, is.na(nyc_shootings$PERP_RACE), "UNKNOWN")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#load the dataset
nyc_shootings <- read.csv("NYPD_Shooting_Incident_Data__Historic_.csv")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#Looking at percent missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's again
round(colMeans(is.na(nyc_shootings)) * 100, 2)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_RACE)
unique(nyc_shootings$PERP_AGE_GROUP)
#Filling the NA's with unknown
nyc_shootings$PERP_SEX <- replace(nyc_shootings$PERP_SEX, is.na(nyc_shootings$PERP_SEX), "U")
nyc_shootings$PERP_RACE <- replace(nyc_shootings$PERP_RACE, is.na(nyc_shootings$PERP_RACE), "UNKNOWN")
nyc_shootings$PERP_AGE_GROUP <- replace(nyc_shootings$PERP_AGE_GROUP, is.na(nyc_shootings$PERP_AGE_GROUP), "UNKNOWN")
#Now I can check for datatypes
str(nyc_shootings)
#need to change the dates and times to proper format
nyc_shootings$OCCUR_DATE <- mdy(nyc_shootings$OCCUR_DATE)
nyc_shootings$OCCUR_TIME <- hms(nyc_shootings$OCCUR_TIME)
#checking it after
str(nyc_shootings)
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n = n())
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_col(aes(x = VIC_SEX, y = n, fill = VIC_RACE))
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_col(aes(x = VIC_SEX, fill = VIC_RACE))
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_col(aes(x = VIC_SEX,y = n_incidents, fill = VIC_RACE))
#Lets Look at the total number of incidents by victim race and gender
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_col(aes(x = VIC_SEX,y = n_incidents, fill = VIC_RACE))
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_col(aes(x = VIC_SEX,y = n_incidents, fill = VIC_RACE)) +
facet_grid(VIC_SEX ~ ., scales = "free_y")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_bar(aes(x = VIC_SEX,y = n_incidents, fill = VIC_RACE)) +
facet_grid(VIC_SEX ~ ., scales = "free_y")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_bar(aes(x = VIC_SEX, fill = VIC_RACE)) +
facet_grid(VIC_SEX ~ ., scales = "free_y")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_bar(aes(x = VIC_RACE y = n_incidents)) +
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_bar(aes(x = VIC_RACE, y = n_incidents)) +
geom_col() +
labs(title = "Number of shooting incidents by victim race and sex") +
facet_grid(. ~ VIC_SEX)
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_col(aes(x = VIC_RACE, y = n_incidents)) +
labs(title = "Number of shooting incidents by victim race and sex") +
facet_grid(. ~ VIC_SEX)
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot() +
geom_bar(aes(x = VIC_RACE)) +
labs(title = "Number of shooting incidents by victim race and sex") +
facet_grid(. ~ VIC_SEX)
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot(aes(x = VIC_SEX, y = n, fill = VIC_RACE)) +
geom_col() +
labs(title = "Number of shooting incidents by victim race and sex")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot(aes(x = VIC_SEX, y = n_incidents, fill = VIC_RACE)) +
geom_col() +
labs(title = "Number of shooting incidents by victim race and sex")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot(aes(x = VIC_SEX, y = n_incidents, fill = VIC_RACE)) +
geom_col() +
labs(title = "Number of shooting incidents by victim's race and sex",
xlab = "Sex", ylab = "Number of Incidents")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot(aes(x = VIC_SEX, y = n_incidents, fill = VIC_RACE)) +
geom_col() +
labs(title = "Number of shooting incidents by victim's race and sex",
xlabel = "Sex", ylabel = "Number of Incidents")
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot(aes(x = VIC_SEX, y = n_incidents, fill = VIC_RACE)) +
geom_col() +
labs(title = "Number of shooting incidents by victim's race and sex",
x = "Sex", y = "Number of Incidents")
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(n()) )
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(1)
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(n())
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(1)
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(1))
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(n))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
#load the dataset
nyc_shootings <- read.csv("NYPD_Shooting_Incident_Data__Historic_.csv")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
#Looking at percent missing values in the dataset
round(colMeans(is.na(nyc_shootings)) * 100, 2)
#Before I fill the blanks, I just want to check how its structured - is it one space or multiple
nyc_shootings$PERP_AGE_GROUP[1:10]
#Now that I've verified, can fill with NA
nyc_shootings[nyc_shootings == ""] <- NA
#Now lets check the NA's again
round(colMeans(is.na(nyc_shootings)) * 100, 2)
unique(nyc_shootings$PERP_SEX)
unique(nyc_shootings$PERP_RACE)
unique(nyc_shootings$PERP_AGE_GROUP)
#Filling the NA's with unknown
nyc_shootings$PERP_SEX <- replace(nyc_shootings$PERP_SEX, is.na(nyc_shootings$PERP_SEX), "U")
nyc_shootings$PERP_RACE <- replace(nyc_shootings$PERP_RACE, is.na(nyc_shootings$PERP_RACE), "UNKNOWN")
nyc_shootings$PERP_AGE_GROUP <- replace(nyc_shootings$PERP_AGE_GROUP, is.na(nyc_shootings$PERP_AGE_GROUP), "UNKNOWN")
#Now I can check for datatypes
str(nyc_shootings)
#need to change the dates and times to proper format
nyc_shootings$OCCUR_DATE <- mdy(nyc_shootings$OCCUR_DATE)
nyc_shootings$OCCUR_TIME <- hms(nyc_shootings$OCCUR_TIME)
#checking it after
str(nyc_shootings)
#Lets Look at the total number of incidents by victim race and gender
#maybe I should change this to be
nyc_shootings %>%
group_by(VIC_RACE, VIC_SEX)%>%
summarise(n_incidents = n()) %>%
ggplot(aes(x = VIC_SEX, y = n_incidents, fill = VIC_RACE)) +
geom_col() +
labs(title = "Number of shooting incidents by victim's race and sex",
x = "Sex", y = "Number of Incidents")
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(n))
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = mean(n()))
#need to get the average number of incidents grouped by victims race
nyc_shootings%>%
group_by(VIC_RACE) %>%
summarise(avg_incidents = n())
newyork.map <- get_map(location= 'New York City, New York',
maptype='roadmap', color='bw',source='google',zoom=13)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggmap)
newyork.map <- get_map(location= 'New York City, New York',
maptype='roadmap', color='bw',source='google',zoom=13)
nyc_map <- get_map(location = "new york city", zoom = 12)
install.packages("leaflet")
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggmap)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggmap)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggmap)
install.packages("leaflet")
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggmap)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggmap)
library(leaflet)
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addProviderTiles("CartoDB.Positron")
#check head of data
head(nyc_shootings)
#Looking at the shape of the dataset
nrow(nyc_shootings)
ncol(nyc_shootings)
leaflet() %>%
addTiles() %>%
setView(-74.00, 40.71, zoom = 12) %>%
addMarkers(data = nyc_shootings, lng = ~Longitude, lat = ~Latitude, popup = "Shooting Incident") %>%
addProviderTiles("CartoDB.Positron")
